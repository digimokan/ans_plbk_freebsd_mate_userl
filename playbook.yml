- hosts: localhost
  connection: local
  vars_files:
    - host_vars/vault.yml
  vars:
    admin_user_and_group_name: "admin"
    sudo_users_group_name: "wheel"
    zfs_pool: "zroot"
  tasks:
    - name: "Configure system clock, time, and time zone"
      ansible.builtin.include_role:
        name: ext/ans_role_config_time
    - name: "Configure system and package upgrades"
      ansible.builtin.include_role:
        name: ext/ans_role_config_upgrades
    - name: "Configure the FreeBSD 'loader' bootloader"
      ansible.builtin.include_role:
        name: ext/ans_role_config_loader
      vars:
        menu_timeout_seconds: "2"
        load_cpu_microcode_updates: true
    - name: "Add sudo-users group '{{ sudo_users_group_name }}'"
      ansible.builtin.include_role:
        name: ext/ans_role_add_group
      vars:
        group_name: "{{ sudo_users_group_name }}"
        is_system_group: true
    - name: "Create independent zfs filesystem dataset for '/home'"
      ansible.builtin.include_role:
        name: ans_role_create_filesystem_dataset
      vars:
        pool: "{{ zfs_pool }}"
        dataset_path: "home"
        mount_point: "/home"
    - name: "Add and configure admin user '{{ admin_user_and_group_name }}'"
      ansible.builtin.include_role:
        name: ext/ans_role_add_user
      vars:
        user_name: "{{ admin_user_and_group_name }}"
        is_system_user: true
        user_groups: "{{ sudo_users_group_name }}"
        create_home_dir: true
        use_zfs_dataset_for_home_dir: true
    - name: "Set up fish shell for user '{{ admin_user_and_group_name }}'"
      ansible.builtin.include_role:
        name: ans_role_config_fish
      vars:
        user_name: "{{ admin_user_and_group_name }}"
        set_as_login_shell: true
    - name: "Add and configure workstation user '{{ wkst_user_and_group_name }}'"
      ansible.builtin.include_role:
        name: ext/ans_role_add_user
      vars:
        user_name: "{{ wkst_user_and_group_name }}"
    - name: "Configure sudo settings, auth group '{{ sudo_users_group_name }}', and shell user '{{ admin_user_and_group_name }}'"
      ansible.builtin.include_role:
        name: ext/ans_role_config_sudo
      vars:
        ask_password_timeout: 45
        password_prompt_timeout_minutes: 0
        use_root_umask: true
        set_auth_for_group: "{{ sudo_users_group_name }}"
        user_for_shell_enhancements: "{{ admin_user_and_group_name }}"
    # - name: "Create and configure XDG user dirs for '{{ wkst_user_and_group_name }}'"
    #   ansible.builtin.include_role:
    #     name: ext/ans_role_config_xdg_user_dirs
    #   vars:
    #     user_name: "{{ wkst_user_and_group_name }}"
    # - name: "Install and configure video card drivers"
    #   ansible.builtin.include_role:
    #     name: ext/ans_role_config_video_drivers
    #   vars:
    #     video_card_make: "Intel"
    #     video_card_series: "HD"
    #     config_opengl_3d_accel: true
    #     config_video_decode_accel: true
    #     config_vulkan: false
    # - name: "Install and configure basic sound packages"
    #   ansible.builtin.include_role:
    #     name: ext/ans_role_config_sound
    # - name: "Install a standard set of system font packages"
    #   ansible.builtin.include_role:
    #     name: ext/ans_role_config_fonts
    #   vars:
    #     install_ms_legacy_fonts: true
    #     install_ms_vista_fonts: true
    # - name: "Install and configure the LibreOffice office application suite"
    #   ansible.builtin.include_role:
    #     name: ans_role_config_libreoffice
    # - name: "Install and configure the VLC video player"
    #   ansible.builtin.include_role:
    #     name: ans_role_config_vlc
    #   vars:
    #     enable_dvd_support: true
    # - name: "Install and configure the Firefox browser"
    #   ansible.builtin.include_role:
    #     name: ans_role_config_firefox
    #   vars:
    #     user_name: "{{ wkst_user_and_group_name }}"
    #     home_page: 'https://www.google.com'
    #     install_google_widevine_drm_addon: true
    # - name: "Install and configure the Chromium browser"
    #   ansible.builtin.include_role:
    #     name: ans_role_config_chromium
    #   vars:
    #     home_page: 'https://www.google.com'
    # - name: "Configure automatic printer discovery and driverless printing"
    #   ansible.builtin.include_role:
    #     name: ans_role_config_automatic_printing
    # - name: "Configure automatic scanner discovery and driverless scanning"
    #   ansible.builtin.include_role:
    #     name: ans_role_config_automatic_scanning
    # - name: "Install and configure the Simple-Scan scanning application"
    #   ansible.builtin.include_role:
    #     name: ans_role_config_simple_scan
    # - name: "Install the Tarsnap backup program, and configure backups"
    #   ansible.builtin.include_role:
    #     name: ans_role_config_tarsnap
    #   vars:
    #     tarsnap_machine_label: "{{ wkst_user_and_group_name }}_nuc6i7_0"
    #     enable_automatic_backups: true
    #     automatic_backup_dirs:
    #       - "/home/{{ wkst_user_and_group_name }}/Documents/"
    #     tarsnap_user_guide_dir: "/home/{{ wkst_user_and_group_name }}/"
    # - name: "Install and configure the MATE desktop environment"
    #   ansible.builtin.include_role:
    #     name: ext/ans_role_config_mate_de
    #   vars:
    #     user_name: "{{ wkst_user_and_group_name }}"
    #     enable_sound_support: true
    #     enable_printing_support: true
    # - name: "Install and configure the XDM display manager"
    #   ansible.builtin.include_role:
    #     name: ext/ans_role_config_xdm_dm
    #   vars:
    #     user_name: "{{ wkst_user_and_group_name }}"
    #     session: "mate"

